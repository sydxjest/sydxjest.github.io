[{"title":"vue基础","date":"2021-04-15T12:52:57.758Z","url":"/2021/04/15/6.vue%E5%9F%BA%E7%A1%804/","categories":[["undefined",""]],"content":" 组件通信 父子组件通信 props：【‘’】 接受数据 只接受不校验 写法1： 子父组件通信 html页面 js页面 非父子组件通信给子组件使用ref标记 在父组件使用this.$refs.xxx.xxx 触发子组件使用props 将数据传递给父组件 父组件 使用：kick=“kick ”（数据单向绑定） 接收html页面 js页面 跨组件通信 动画和过渡 动画：j s实现动画效果 过渡：css3来实现 animate.css vue提供了一个内置组件：transition mode 表示transition组件的过渡的顺序 out-in 推荐 in-out enter-active-class 进入 leave-cative-class 离开 js页面 数据请求 1.原生的ajax和jq不符合框架的用法 框架中数据请求方式 html5提供的 fetch 第三方库：axios 先学习fetch 在学习axios 工作fetch axios和fetch的返回值都是67 promise （promise的api都可以用） 1.fetch(1).fetch-get fetch(url,requestConfig)html页面 js页面 2.fetch-post -file1.通过对象e来得到 图片的实例2.图片必须是二进制才能传递给后端HTML页面 js页面 3.fetch-post-form如果我们是做了表单提交，那么携带参数的形式叫做 Form Data表单提交要添加一个请求头html页面 js页面 4.fetch-post-json数据携带形式是一个对象html页面 js页面 axios 1.axios-get 用法一 用法二 html页面 2.axios-post-json格式：axios.post(url,data,requestConfig)写法1： html页面 生命周期 作用 给我们机会在组件创建前或者组件变化时添加代码的机会 组件生命周期划分阶段 13个 核心8个 1.mounting 挂载 ：自动执行 ，自动触发，触发一次 2updating 更新触发要求： 数据改变后触发，数据也要用 (2) updated可以做真实DOM操作，数据请求 3.destroying 销毁 两个钩子作用一样，使用一个即可 2.unmounted 4.缓存阶段 触发条件：keep-alive[缓存组件] //只缓存one //不缓存one 解释 activate 前台显示 deactivated 后台缓存 app.unmount() 删除缓存中的组件 工作 deactivated 如果缓存时间过久 可以自动去清除缓存5.错误处理阶段 作用：父组件捕获子组件的错误，使用另一个页面代替错误的子组件，称为回退ui 解释 errorCaptured(error,instance,info) error:错误 instance 组件 info具体信息 6.虚拟DOM跟踪两个钩子函数renderTracked({key,target,tyep}) key:数据名称 data：选项返回值 get：要做的get操作 一共13个钩子函数 核心8个，使用3个 面试时问核心8个 挂载+更新+销毁 b.使用的三个1.mounted2.updated3.unmounted 路由通信 多组件状态管理"},{"title":"Hello World","date":"2021-04-15T04:39:37.252Z","url":"/2021/04/15/hello-world/","categories":[["undefined",""]],"content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post More info: Writing Run server More info: Server Generate static files More info: Generating Deploy to remote sites More info: Deployment"}]